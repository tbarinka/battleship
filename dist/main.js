(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>l});var i=n(537),a=n.n(i),o=n(645),r=n.n(o)()(a());r.push([e.id,"html,\nbody {\n    margin: 0;\n    height: 100%;\n}\nbody {\n    position: relative;\n}\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n    position: relative\n}\n/*styles for the placement module */\n.placement-module-container {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 10px;\n    bottom: 0;\n    margin-left: auto;\n    margin-right: auto;\n    width: 800px;\n    height: 650px;\n    background-color: grey;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n    padding-right: 30px;\n    border-radius: 10px;\n}\n.placementText {\n    height: 10%;\n}\n.middleSubcontainer, .rightInfoSubcontainer {\n    display: flex;\n    align-items: center;\n    padding: 10px;\n}\n.middleSubcontainer {\n    gap: 30px;\n}\n.rightInfoSubcontainer {\n    gap: 10px;\n    flex-direction: column;\n    align-items: center;\n}\n.rightInfoButtonsContainer {\n    display: flex;\n    flex-direction: row;\n    gap: 10px;\n    padding: 5px;\n}\n.bottomSubcontainer {\n    display: flex;\n    gap: 20px;\n    margin-left: -200px;\n    height: 25%;\n    margin-top: 20px;\n}\n.placementInstructionBox {\n\n}\n.shipAllClassesContainer {\n    display: flex;\n    flex-direction: row;\n    grid-template-columns: repeat(5, 1fr);\n    background-color: rgba(0, 0, 255, 0);\n    gap: 20px;\n    width: 400px;\n    \n}\n.singleShipClassContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n.ship {\n    display: flex;\n    gap: 1px;\n}\n.shipAlt {\n    display: flex;\n    flex-direction: column;\n    gap: 1px;\n    border: solid black 2px;\n}\n\n/*styles for the two grids and coordinates */\n.doubleBoardContainer {\n    display: flex;\n    gap: 175px;\n    padding: 10px;\n}\n.singleBoardContainer {\n    display: flex;\n    flex-direction: column;\n}\n.xCoordinateContainer {\n    display: flex;\n    gap: 1px;\n    margin-left: 35px;\n    margin-bottom: -10px;\n}\n.yCoordinateContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 1px;\n    margin-top: 10px;\n}\n.leftSquare {\n    display: flex;\n    justify-content: center;\n}\n.leftSquare, .upperSquare {\n    height: 35px;\n    width: 35px;\n    display: flex;\n    justify-content: center;\n}\n.subcontainer {\n    display: flex;\n}\n.placementSquare {\n    height: 35px;\n    width: 35px;\n    background-color: red;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    opacity: 1;\n}\n.square {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.square:hover, .placementSquare:hover {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #cbd5e1;\n}\n.squareContainer {\n\n}\n.grid-container {\n    height: 350px;\n    width: 350px;\n    display: grid;\n    grid-template-columns: repeat(10, 35px);\n    grid-template-rows: repeat(10, 35px);\n    grid-auto-flow: column;\n    gap: 1px;\n}\n/* styles for score card */\n.singleBoardScoreContainer {\n    display: flex;\n    gap: 5px;\n    justify-content: left;\n}\n\n/*styles for game controller hud*/\n.populateButton, .placementButton {\n    height: 40px;\n    width: 60px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.buttonContainer {\n    display: flex;\n    gap: 15px;\n    justify-content: center;\n}\n.formContainer {\n    display: flex;\n    justify-content: center;\n    gap: 5px;\n    margin: 10px;\n}\n.winnerCard {\n    position: absolute;\n    background-color: red;\n    top: 35%;\n    left: 49%;\n}\n.selectSquare {\n    \n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,YAAY;AAChB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;IACZ;AACJ;AACA,mCAAmC;AACnC;IACI,kBAAkB;IAClB,OAAO;IACP,QAAQ;IACR,SAAS;IACT,SAAS;IACT,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,mBAAmB;IACnB,mBAAmB;AACvB;AACA;IACI,WAAW;AACf;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,aAAa;AACjB;AACA;IACI,SAAS;AACb;AACA;IACI,SAAS;IACT,sBAAsB;IACtB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;IACT,YAAY;AAChB;AACA;IACI,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,WAAW;IACX,gBAAgB;AACpB;AACA;;AAEA;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,qCAAqC;IACrC,oCAAoC;IACpC,SAAS;IACT,YAAY;;AAEhB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;AACA;IACI,aAAa;IACb,QAAQ;AACZ;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,uBAAuB;AAC3B;;AAEA,4CAA4C;AAC5C;IACI,aAAa;IACb,UAAU;IACV,aAAa;AACjB;AACA;IACI,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,aAAa;IACb,QAAQ;IACR,iBAAiB;IACjB,oBAAoB;AACxB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,aAAa;AACjB;AACA;IACI,YAAY;IACZ,WAAW;IACX,qBAAqB;IACrB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,UAAU;AACd;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,yBAAyB;AAC7B;AACA;;AAEA;AACA;IACI,aAAa;IACb,YAAY;IACZ,aAAa;IACb,uCAAuC;IACvC,oCAAoC;IACpC,sBAAsB;IACtB,QAAQ;AACZ;AACA,0BAA0B;AAC1B;IACI,aAAa;IACb,QAAQ;IACR,qBAAqB;AACzB;;AAEA,iCAAiC;AACjC;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,SAAS;IACT,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,QAAQ;IACR,YAAY;AAChB;AACA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,QAAQ;IACR,SAAS;AACb;AACA;;AAEA",sourcesContent:["html,\nbody {\n    margin: 0;\n    height: 100%;\n}\nbody {\n    position: relative;\n}\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n    position: relative\n}\n/*styles for the placement module */\n.placement-module-container {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 10px;\n    bottom: 0;\n    margin-left: auto;\n    margin-right: auto;\n    width: 800px;\n    height: 650px;\n    background-color: grey;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n    padding-right: 30px;\n    border-radius: 10px;\n}\n.placementText {\n    height: 10%;\n}\n.middleSubcontainer, .rightInfoSubcontainer {\n    display: flex;\n    align-items: center;\n    padding: 10px;\n}\n.middleSubcontainer {\n    gap: 30px;\n}\n.rightInfoSubcontainer {\n    gap: 10px;\n    flex-direction: column;\n    align-items: center;\n}\n.rightInfoButtonsContainer {\n    display: flex;\n    flex-direction: row;\n    gap: 10px;\n    padding: 5px;\n}\n.bottomSubcontainer {\n    display: flex;\n    gap: 20px;\n    margin-left: -200px;\n    height: 25%;\n    margin-top: 20px;\n}\n.placementInstructionBox {\n\n}\n.shipAllClassesContainer {\n    display: flex;\n    flex-direction: row;\n    grid-template-columns: repeat(5, 1fr);\n    background-color: rgba(0, 0, 255, 0);\n    gap: 20px;\n    width: 400px;\n    \n}\n.singleShipClassContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n.ship {\n    display: flex;\n    gap: 1px;\n}\n.shipAlt {\n    display: flex;\n    flex-direction: column;\n    gap: 1px;\n    border: solid black 2px;\n}\n\n/*styles for the two grids and coordinates */\n.doubleBoardContainer {\n    display: flex;\n    gap: 175px;\n    padding: 10px;\n}\n.singleBoardContainer {\n    display: flex;\n    flex-direction: column;\n}\n.xCoordinateContainer {\n    display: flex;\n    gap: 1px;\n    margin-left: 35px;\n    margin-bottom: -10px;\n}\n.yCoordinateContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 1px;\n    margin-top: 10px;\n}\n.leftSquare {\n    display: flex;\n    justify-content: center;\n}\n.leftSquare, .upperSquare {\n    height: 35px;\n    width: 35px;\n    display: flex;\n    justify-content: center;\n}\n.subcontainer {\n    display: flex;\n}\n.placementSquare {\n    height: 35px;\n    width: 35px;\n    background-color: red;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    opacity: 1;\n}\n.square {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.square:hover, .placementSquare:hover {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #cbd5e1;\n}\n.squareContainer {\n\n}\n.grid-container {\n    height: 350px;\n    width: 350px;\n    display: grid;\n    grid-template-columns: repeat(10, 35px);\n    grid-template-rows: repeat(10, 35px);\n    grid-auto-flow: column;\n    gap: 1px;\n}\n/* styles for score card */\n.singleBoardScoreContainer {\n    display: flex;\n    gap: 5px;\n    justify-content: left;\n}\n\n/*styles for game controller hud*/\n.populateButton, .placementButton {\n    height: 40px;\n    width: 60px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.buttonContainer {\n    display: flex;\n    gap: 15px;\n    justify-content: center;\n}\n.formContainer {\n    display: flex;\n    justify-content: center;\n    gap: 5px;\n    margin: 10px;\n}\n.winnerCard {\n    position: absolute;\n    background-color: red;\n    top: 35%;\n    left: 49%;\n}\n.selectSquare {\n    \n}"],sourceRoot:""}]);const l=r},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(i)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(r[s]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);i&&r[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(a," */"),r=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(r).concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var o={},r=[],l=0;l<e.length;l++){var s=e[l],d=i.base?s[0]+i.base:s[0],c=o[d]||0,p="".concat(d," ").concat(c);o[d]=c+1;var A=n(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var h=a(u,i);i.byIndex=l,t.splice(l,0,{identifier:p,updater:h,references:1})}r.push(p)}return r}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=i(e=e||[],a=a||{});return function(e){e=e||[];for(var r=0;r<o.length;r++){var l=n(o[r]);t[l].references--}for(var s=i(e,a),d=0;d<o.length;d++){var c=n(o[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=s}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,a&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(i){var a=t[i];if(void 0!==a)return a.exports;var o=t[i]={id:i,exports:{}};return e[i](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),i=n(795),a=n.n(i),o=n(569),r=n.n(o),l=n(565),s=n.n(l),d=n(216),c=n.n(d),p=n(589),A=n.n(p),u=n(426),h={};h.styleTagTransform=A(),h.setAttributes=s(),h.insert=r().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=c(),t()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;class C{constructor(e,t,n,i){this.size=e,this.hits=[],this.xStart=t,this.yStart=n,this.direction=null}hit(){return this.hits.push("hit"),this.hits.length==this.size?this.isSunk():this.hit}isSunk(){return"sunk!"}}class f{constructor(e,t){this.X=e,this.Y=t,this.isHit=!1,this.containsShip=!1,this.ship=null}}class m{constructor(e){this.xAxis=["A","B","C","D","E","F","G","H","I","J"],this.yAxis=[1,2,3,4,5,6,7,8,9,10],this.grid=this.makeGrid()}receiveAttack(e,t){let n=this.grid.find((n=>n.X==e&&n.Y==t));return n.isHit=!0,1==n.containsShip?(n.ship.hit(),n.ship):n.ship}makeGrid(){let e=[];for(let t=0;t<this.xAxis.length;t++)for(let n=0;n<this.yAxis.length;n++){let i=new f(this.xAxis[t],this.yAxis[n]);e.push(i)}return e}populateShip(e,t,n,i){if(e>1){if("north"==i&&n<e)return console.log("overflow at "+t+n),"overflow!";if("south"==i&&n-1>10-e)return console.log("overflow at "+t+n),"overflow!";if("west"==i&&this.xAxis.indexOf(t)<e-1)return console.log("overflow at "+t+n),"overflow!";if("east"==i&&this.xAxis.indexOf(t)>10-e)return console.log("overflow at "+t+n),"overflow!"}let a=new C(e,t,n,i);console.log("new Ship y = "+a.yStart),a.direction=i;let o=this.grid.find((e=>e.X==a.xStart&&e.Y==a.yStart)),r=[];o.containsShip=!0,o.ship=a,r.push(o);let l=this.grid.indexOf(o);for(;e>1;){if("north"==i){n-=1;let t=this.grid.find((e=>e.X==a.xStart&&e.Y==n));t.containsShip=!0,t.ship=a,r.push(t),e-=1}if("south"==i){l+=1;let t=this.grid[l];t.containsShip=!0,t.ship=a,r.push(t),e-=1}else if("east"==i){t=this.xAxis[this.xAxis.indexOf(t)+1];let n=this.grid.find((e=>e.X==t&&e.Y==a.yStart));n.containsShip=!0,n.ship=a,r.push(n),e-=1}else if("west"==i){t=this.xAxis[this.xAxis.indexOf(t)-1];let n=this.grid.find((e=>e.X==t&&e.Y==a.yStart));n.containsShip=!0,n.ship=a,r.push(n),e-=1}}return r}depopulateShip(e,t,n,i){let a=new C(e,t,n),o=this.grid.find((e=>e.X==a.xStart&&e.Y==a.yStart)),r=[];o.containsShip=!1,o.ship=null,r.push(o);let l=this.grid.indexOf(o);for(;e>1;){if("north"==i){n-=1;let t=this.grid.find((e=>e.X==a.xStart&&e.Y==n));t.containsShip=!1,t.ship=null,r.push(t),e-=1}if("south"==i){l+=1;let t=this.grid[l];t.containsShip=!1,t.ship=null,r.push(t),e-=1}else if("east"==i){t=this.xAxis[this.xAxis.indexOf(t)+1];let n=this.grid.find((e=>e.X==t&&e.Y==a.yStart));n.containsShip=!1,n.ship=null,r.push(n),e-=1}else if("west"==i){t=this.xAxis[this.xAxis.indexOf(t)-1];let n=this.grid.find((e=>e.X==t&&e.Y==a.yStart));n.containsShip=!1,n.ship=null,r.push(n),e-=1}}return r}}let g=new m,x=new m,B=new class{constructor(e,t,n,i){this.playerBoard=e,this.player=t,this.aiBoard=n,this.ai=i,D(this.playerBoard,this.aiBoard),R("Player",0,"AI",0)}reloadBoards(){this.playerBoard=new m,this.aiBoard=new m;let e=document.getElementById("container");e.removeChild(e.firstChild),D(this.playerBoard,this.aiBoard)}populatePlayer(e,t,n,i){this.playerBoard.populateShip(e,t,n,i);let a=document.getElementById("container");a.removeChild(a.firstChild),D(this.playerBoard,this.aiBoard)}depopulatePlayer(e,t,n,i){this.playerBoard.depopulateShip(e,t,n,i);let a=document.getElementById("container");a.removeChild(a.firstChild),D(this.playerBoard,this.aiBoard)}simplePopulate(){this.playerBoard.populateShip(2,"I",4,"east"),this.playerBoard.populateShip(4,"C",5,"east"),this.playerBoard.populateShip(3,"J",6,"south"),this.playerBoard.populateShip(3,"B",8,"south"),this.playerBoard.populateShip(2,"E",9,"east");let e=document.getElementById("container");e.removeChild(e.firstChild),D(this.playerBoard,this.aiBoard)}simplePopulateAI(){this.aiBoard.populateShip(2,"I",4,"east"),this.aiBoard.populateShip(4,"C",5,"east"),this.aiBoard.populateShip(3,"J",6,"south"),this.aiBoard.populateShip(3,"B",8,"south"),this.aiBoard.populateShip(2,"E",9,"east");let e=document.getElementById("container");e.removeChild(e.firstChild),D(this.playerBoard,this.aiBoard)}attackAI(e,t){if(this.aiBoard.X==e||this.aiBoard.Y==t)return console.log("repeat hit");this.aiBoard.receiveAttack(e,t),container.removeChild(container.firstChild),D(this.playerBoard,this.aiBoard),this.keepScore()}attackPlayer(e,t){this.playerBoard.receiveAttack(e,t),container.removeChild(container.firstChild),D(this.playerBoard,this.aiBoard),this.keepScore()}produceArrayOfPlayerShips(){let e=[];this.playerBoard.grid.forEach((t=>{null!=t.ship&&e.push(t.ship)}));let t=[];return e.forEach((e=>{t.includes(e)||t.push(e)})),t}produceArrayOfAiShips(){let e=[];this.aiBoard.grid.forEach((t=>{null!=t.ship&&e.push(t.ship)}));let t=[];return e.forEach((e=>{t.includes(e)||t.push(e)})),t}keepScore(){let e=this.produceArrayOfPlayerShips(),t=this.produceArrayOfAiShips(),n=0,i=0;e.forEach((e=>{e.hits.length==e.size&&(n+=1)})),t.forEach((e=>{e.hits.length==e.size&&(i+=1)})),container.removeChild(container.firstChild.nextSibling),R("AI",n,"Player",i),5==n?M("AI wins!"):5==i&&M("You win!")}randomParameterProducer(){return[this.playerBoard.xAxis[Math.trunc(10*Math.random())],this.playerBoard.yAxis[Math.trunc(10*Math.random())]]}}(g,"taylor",x,"computer");const y=document.createElement("button");y.addEventListener("click",(function(){B.simplePopulate()})),y.classList.add("populateButton"),y.textContent="Populate Player";const I=document.createElement("button");I.addEventListener("click",S),I.classList.add("populateButton"),I.textContent="Populate AI";const b=document.createElement("button");b.addEventListener("click",L),b.classList.add("populateButton"),b.textContent="Attack AI";const v=document.createElement("button");function S(){B.simplePopulateAI()}function E(e,t,n,i){B.populatePlayer(e,t,n,i)}function k(e,t,n,i){B.depopulatePlayer(e,t,n,i)}v.addEventListener("click",j),v.classList.add("populateButton"),v.textContent="Attack Player";const w=B.playerBoard.grid.slice();function L(e,t){let n=B.aiBoard.grid.find((n=>n.X==e&&n.Y==t));if(console.log(n),1==n.isHit&&alert("You have already attacked that square! Try another."),0==n.isHit){let i=B.aiBoard.grid.indexOf(n);w.splice(i,1),B.attackAI(e,t),setTimeout((()=>{j()}),"500")}}const Y=B.playerBoard.grid.slice();function j(){if(0==Y.length)return alert("game over!");let e=Y[Math.floor(Math.random()*Y.length)],t=e.X,n=e.Y,i=Y.indexOf(e);Y.splice(i,1),B.attackPlayer(t,n)}let q=document.createElement("label");q.classList.add("attackLabel"),q.textContent="Input X Coordinate: ",document.createElement("input").setAttribute("type","text");let T=document.createElement("label");function P(e,t){let n=e.grid,i=document.createElement("div");return i.classList.add("grid-container"),n.forEach((e=>{let n=function(e,t="ai"){let n=document.createElement("div");return n.classList.add("square"),1==e.isHit&&(n.style.backgroundColor="#6ee7b7"),"ai"==t&&n.addEventListener("click",(function(){let t=e.X,n=e.Y;L(t,n),console.log(t+n)})),1==e.isHit&&1==e.containsShip&&(n.style.backgroundColor="red",n.textContent="X"),1==e.containsShip&&(n.style.backgroundColor="red"),n}(e,t);i.appendChild(n)})),i}function O(){let e=document.createElement("div");return e.classList.add("xCoordinateContainer"),["A","B","C","D","E","F","G","H","I","J"].forEach((t=>{let n=document.createElement("div");n.classList.add("upperSquare"),n.textContent=t,e.appendChild(n)})),e}function X(){let e=document.createElement("div");return e.classList.add("yCoordinateContainer"),[1,2,3,4,5,6,7,8,9,10].forEach((t=>{let n=document.createElement("div");n.classList.add("leftSquare"),n.textContent=t,e.appendChild(n)})),e}function D(e,t){document.getElementById("container").prepend(function(e,t){let n=document.createElement("div");return n.classList.add("doubleBoardContainer"),n.appendChild(function(e){let t=document.createElement("div");t.classList.add("singleBoardContainer");let n=document.createElement("div");return n.classList.add("subcontainer"),n.appendChild(X()),n.appendChild(P(e,"player")),t.appendChild(O()),t.appendChild(n),t}(e)),n.appendChild(function(e){let t=document.createElement("div");t.classList.add("singleBoardContainer");let n=document.createElement("div");return n.classList.add("subcontainer"),n.appendChild(X()),n.appendChild(P(e)),t.appendChild(O()),t.appendChild(n),t}(t)),n}(e,t))}function Q(e,t){let n=document.createElement("div");n.classList.add("singleBoardScoreContainer");let i=document.createElement("div"),a=document.createElement("div");return i.textContent=e+" score: ",n.appendChild(i),n.appendChild(a),a.textContent=t+"/5",n}function R(e,t,n,i){let a=document.createElement("div");a.classList.add("scoreKeeperContainer"),a.appendChild(Q(e,t)),a.appendChild(Q(n,i)),document.getElementById("container").appendChild(a)}function M(e){let t=document.createElement("div");t.classList.add("winnerCard"),t.textContent=e,container.firstChild.appendChild(t)}T.classList.add("attackLabel"),T.textContent="Input Y Coordinate: ",document.createElement("input").setAttribute("type","text");let Z=document.createElement("div");Z.classList.add("placement-module-container"),Z.setAttribute("id","placementContainer");let z=new m,H=[];function W(){Z.appendChild(function(){let e=document.createElement("div");return e.classList.add("placementText"),e.textContent="Place Your Ships",e}()),Z.appendChild(function(){let e=document.createElement("div");return e.classList.add("middleSubcontainer"),e.appendChild(function(e){let t=document.createElement("div");t.classList.add("singleBoardContainer");let n=document.createElement("div");return n.classList.add("subcontainer"),n.appendChild(X()),n.appendChild(function(e){let t=e.grid,n=document.createElement("div");return n.classList.add("grid-container"),t.forEach((e=>{let t=function(e){let t=document.createElement("div");return t.classList.add("square"),1==e.containsShip&&(t.style.backgroundColor="red",t.addEventListener("click",(function(){let e=t.id.split(""),n=z.grid.find((t=>t.X==e[0]&&t.Y==e[1]));console.log(n);let i=n.ship.size,a=n.ship.xStart,o=n.ship.yStart;"east"==n.ship.direction?(z.depopulateShip(i,a,o,"east"),k(i,a,o,"east"),z.populateShip(i,a,o,"south"),E(i,a,o,"south")):"south"==n.ship.direction&&(z.depopulateShip(i,a,o,"south"),k(i,a,o,"south"),z.populateShip(i,a,o,"east"),E(i,a,o,"east")),J(Z),document.body.removeChild(Z),W()}))),t.setAttribute("id",e.X+e.Y),t.addEventListener("dragover",(function(e){console.log("dragOver"),e.preventDefault()})),t.addEventListener("drop",(function(e){console.log("Drop"),e.preventDefault();let t=e.dataTransfer.getData("text");console.log("data = "+t),document.getElementById(t);let n=e.target.id,i=t,a=n[0],o=n[1];0==n[2]&&(o=[n[1],n[2]].join("")),0==N?(E(i,a,o,"east"),z.populateShip(i,a,o,"east")):(E(i,a,o,"south"),z.populateShip(i,a,o,"south")),J(Z),document.body.removeChild(Z),H.push(i),W()})),t}(e);n.appendChild(t)})),n}(e)),t.appendChild(O()),t.appendChild(n),t}(z)),e.appendChild(function(){let e=document.createElement("div");return e.classList.add("rightInfoSubcontainer"),e.appendChild(function(){let e=document.createElement("div");return e.classList.add("rightInfoButtonsContainer"),e.appendChild(function(){let e=document.createElement("button");return e.classList.add("placementButton"),e.textContent="Reset Ships",e.addEventListener("click",V),e}()),e.appendChild(function(){let e=document.createElement("button");return e.classList.add("placementButton"),e.textContent="Begin Game",e.addEventListener("click",K),e}()),e}()),e.appendChild(function(){let e=document.createElement("div");return e.classList.add("placementInstructionBox"),e.appendChild(U("Place your ships on the battlefield by dragging and dropping them on your desired location.")),e.appendChild(U("There are two ways to rotate ships: (1) Prior to placement, click the rotate button at the bottom of board. (2) Click ships that have already been placed on the board to rotate them 90 degrees.")),e.appendChild(U("Once you have placed all five ships, press the Begin button to start your game!")),e}()),e}()),e}()),Z.appendChild(function(){let e=document.createElement("div");return e.classList.add("bottomSubcontainer"),e.appendChild(function(){let e=document.createElement("button");return e.textContent="Rotate Ship 90°",e.classList.add("placementButton"),e.setAttribute("id","rotateShipButton"),e.addEventListener("click",(()=>{document.querySelectorAll("div.ship").forEach((function(e){"column"==e.style.flexDirection?(e.style.flexDirection="row",N=0):(e.style.flexDirection="column",N=1)})),function(){let e=document.querySelectorAll("div.singleShipClassContainer");e.forEach((function(e){e.style.flexDirection=1==N?"row":"column"})),console.log("next log is the test"),console.log(e)}()})),e}()),e.appendChild(function(){let e=document.createElement("div");e.classList.add("shipAllClassesContainer");let t=document.createElement("div");t.classList.add("singleShipClassContainer");let n=document.createElement("div");n.classList.add("singleShipClassContainer");let i=document.createElement("div");return i.classList.add("singleShipClassContainer"),console.log(N+"= rotationTracker"),1==N&&(t.style.flexDirection="row",n.style.flexDirection="row",i.style.flexDirection="row"),0==H.filter((e=>2==e)).length?(t.appendChild(F(2)),t.appendChild(F(2)),e.appendChild(t)):1==H.filter((e=>2==e)).length&&(t.appendChild(F(2)),e.appendChild(t)),0==H.filter((e=>3==e)).length?(n.appendChild(F(3)),n.appendChild(F(3)),e.appendChild(n)):1==H.filter((e=>3==e)).length&&(n.appendChild(F(3)),e.appendChild(n)),0==H.filter((e=>4==e)).length&&(i.appendChild(F(4)),e.appendChild(i)),e}()),e}()),document.body.appendChild(Z)}function U(e){let t=document.createElement("p");return t.classList.add("instructionContent"),t.textContent=e,t}function J(e){for(;e.firstChild;)e.removeChild(e.firstChild)}const G="";let N=0;function F(e){let t=document.createElement("div");for(t.classList.add("ship"),t.setAttribute("draggable","true"),t.setAttribute("id",e),1==N&&(console.log("test"),t.style.flexDirection="column"),0==N&&(t.style.flexDirection="row");e>=1;){let n=document.createElement("div");n.classList.add("placementSquare"),t.appendChild(n),e-=1}return t.addEventListener("dragstart",_),t.addEventListener("dragend",(function(e){e.target.classList.remove("dragging")})),t}function _(e){e.currentTarget.classList.add("dragging"),e.dataTransfer.clearData(),e.dataTransfer.setData("text/plain",e.target.id);const t=e.dataTransfer.getData("text");console.log(t),G=document.getElementById(t),console.log(G),e.currentTarget.removeEventListener("dragend",_)}function K(){5==H.length&&(S(),J(Z),document.body.removeChild(Z))}function V(){z=new m,function(){for(;H.length>=1;)H.pop()}(),J(Z),document.body.removeChild(Z),B.reloadBoards(),W()}W()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,