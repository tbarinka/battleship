(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var i=n(537),a=n.n(i),r=n(645),o=n.n(r)()(a());o.push([e.id,"html,\nbody {\n    margin: 0;\n    height: 100%;\n}\nbody {\n    position: relative;\n}\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n    position: relative\n}\n/*styles for the placement module */\n.placement-module-container {\n    position: relative;\n    bottom: 70vh;\n    left: 59.5vh;\n    width: 430px;\n    background-color: grey;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n    padding-right: 30px;\n    border-radius: 10px;\n}\n\n/*styles for the two grids and coordinates */\n.doubleBoardContainer {\n    display: flex;\n    gap: 175px;\n    padding: 10px;\n}\n.singleBoardContainer {\n    display: flex;\n    flex-direction: column;\n}\n.xCoordinateContainer {\n    display: flex;\n    gap: 3px;\n    margin-left: 35px;\n    margin-bottom: -10px;\n}\n.yCoordinateContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n    margin-top: 10px;\n}\n.leftSquare {\n    display: flex;\n    justify-content: center;\n}\n.leftSquare, .upperSquare {\n    height: 35px;\n    width: 35px;\n    display: flex;\n    justify-content: center;\n}\n.subcontainer {\n    display: flex;\n}\n.square {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.square:hover {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #cbd5e1;\n}\n.squareContainer {\n\n}\n.grid-container {\n    height: 350px;\n    width: 350px;\n    display: grid;\n    grid-template-columns: repeat(10, 35px);\n    grid-template-rows: repeat(10, 35px);\n    grid-auto-flow: column;\n    gap: 3px;\n}\n/* styles for score card */\n.singleBoardScoreContainer {\n    display: flex;\n    gap: 5px;\n    justify-content: left;\n}\n\n/*styles for game controller hud*/\n.populateButton {\n    height: 40px;\n    width: 60px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.buttonContainer {\n    display: flex;\n    gap: 15px;\n    justify-content: center;\n}\n.formContainer {\n    display: flex;\n    justify-content: center;\n    gap: 5px;\n    margin: 10px;\n}\n.winnerCard {\n    position: absolute;\n    background-color: red;\n    top: 35%;\n    left: 49%;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,YAAY;AAChB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;IACZ;AACJ;AACA,mCAAmC;AACnC;IACI,kBAAkB;IAClB,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA,4CAA4C;AAC5C;IACI,aAAa;IACb,UAAU;IACV,aAAa;AACjB;AACA;IACI,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,aAAa;IACb,QAAQ;IACR,iBAAiB;IACjB,oBAAoB;AACxB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,aAAa;AACjB;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,yBAAyB;AAC7B;AACA;;AAEA;AACA;IACI,aAAa;IACb,YAAY;IACZ,aAAa;IACb,uCAAuC;IACvC,oCAAoC;IACpC,sBAAsB;IACtB,QAAQ;AACZ;AACA,0BAA0B;AAC1B;IACI,aAAa;IACb,QAAQ;IACR,qBAAqB;AACzB;;AAEA,iCAAiC;AACjC;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,SAAS;IACT,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,QAAQ;IACR,YAAY;AAChB;AACA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,QAAQ;IACR,SAAS;AACb",sourcesContent:["html,\nbody {\n    margin: 0;\n    height: 100%;\n}\nbody {\n    position: relative;\n}\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n    position: relative\n}\n/*styles for the placement module */\n.placement-module-container {\n    position: relative;\n    bottom: 70vh;\n    left: 59.5vh;\n    width: 430px;\n    background-color: grey;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n    padding-right: 30px;\n    border-radius: 10px;\n}\n\n/*styles for the two grids and coordinates */\n.doubleBoardContainer {\n    display: flex;\n    gap: 175px;\n    padding: 10px;\n}\n.singleBoardContainer {\n    display: flex;\n    flex-direction: column;\n}\n.xCoordinateContainer {\n    display: flex;\n    gap: 3px;\n    margin-left: 35px;\n    margin-bottom: -10px;\n}\n.yCoordinateContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n    margin-top: 10px;\n}\n.leftSquare {\n    display: flex;\n    justify-content: center;\n}\n.leftSquare, .upperSquare {\n    height: 35px;\n    width: 35px;\n    display: flex;\n    justify-content: center;\n}\n.subcontainer {\n    display: flex;\n}\n.square {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.square:hover {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #cbd5e1;\n}\n.squareContainer {\n\n}\n.grid-container {\n    height: 350px;\n    width: 350px;\n    display: grid;\n    grid-template-columns: repeat(10, 35px);\n    grid-template-rows: repeat(10, 35px);\n    grid-auto-flow: column;\n    gap: 3px;\n}\n/* styles for score card */\n.singleBoardScoreContainer {\n    display: flex;\n    gap: 5px;\n    justify-content: left;\n}\n\n/*styles for game controller hud*/\n.populateButton {\n    height: 40px;\n    width: 60px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.buttonContainer {\n    display: flex;\n    gap: 15px;\n    justify-content: center;\n}\n.formContainer {\n    display: flex;\n    justify-content: center;\n    gap: 5px;\n    margin: 10px;\n}\n.winnerCard {\n    position: absolute;\n    background-color: red;\n    top: 35%;\n    left: 49%;\n}"],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",i=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),i&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),i&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,i,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);i&&o[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(a," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,i=0;i<t.length;i++)if(t[i].identifier===e){n=i;break}return n}function i(e,i){for(var r={},o=[],s=0;s<e.length;s++){var l=e[s],d=i.base?l[0]+i.base:l[0],c=r[d]||0,p="".concat(d," ").concat(c);r[d]=c+1;var A=n(p),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(u);else{var h=a(u,i);i.byIndex=s,t.splice(s,0,{identifier:p,updater:h,references:1})}o.push(p)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var r=i(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var s=n(r[o]);t[s].references--}for(var l=i(e,a),d=0;d<r.length;d++){var c=n(r[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}r=l}}},569:e=>{var t={};e.exports=function(e,n){var i=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,a&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(i,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(i){var a=t[i];if(void 0!==a)return a.exports;var r=t[i]={id:i,exports:{}};return e[i](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),i=n(795),a=n.n(i),r=n(569),o=n.n(r),s=n(565),l=n.n(s),d=n(216),c=n.n(d),p=n(589),A=n.n(p),u=n(426),h={};h.styleTagTransform=A(),h.setAttributes=l(),h.insert=o().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=c(),t()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;class C{constructor(e,t,n,i){this.size=e,this.hits=[],this.xStart=t,this.yStart=n}hit(){return this.hits.push("hit"),this.hits.length==this.size?this.isSunk():this.hit}isSunk(){return"sunk!"}}class f{constructor(e,t){this.X=e,this.Y=t,this.isHit=!1,this.containsShip=!1,this.ship=null}}class m{constructor(e){this.xAxis=["A","B","C","D","E","F","G","H","I","J"],this.yAxis=[1,2,3,4,5,6,7,8,9,10],this.grid=this.makeGrid()}receiveAttack(e,t){let n=this.grid.find((n=>n.X==e&&n.Y==t));return n.isHit=!0,1==n.containsShip?(n.ship.hit(),n.ship):n.ship}makeGrid(){let e=[];for(let t=0;t<this.xAxis.length;t++)for(let n=0;n<this.yAxis.length;n++){let i=new f(this.xAxis[t],this.yAxis[n]);e.push(i)}return e}populateShip(e,t,n,i){if(e>1){if("north"==i&&n<e)return console.log("overflow at "+t+n),"overflow!";if("south"==i&&n-1>10-e)return console.log("overflow at "+t+n),"overflow!";if("west"==i&&this.xAxis.indexOf(t)<e-1)return console.log("overflow at "+t+n),"overflow!";if("east"==i&&this.xAxis.indexOf(t)>10-e)return console.log("overflow at "+t+n),"overflow!"}let a=new C(e,t,n),r=this.grid.find((e=>e.X==a.xStart&&e.Y==a.yStart)),o=[];for(r.containsShip=!0,r.ship=a,o.push(r);e>1;)if("north"==i){n-=1;let t=this.grid.find((e=>e.X==a.xStart&&e.Y==n));t.containsShip=!0,t.ship=a,o.push(t),e-=1}else if("south"==i){n+=1;let t=this.grid.find((e=>e.X==a.xStart&&e.Y==n));t.containsShip=!0,t.ship=a,o.push(t),e-=1}else if("east"==i){t=this.xAxis[this.xAxis.indexOf(t)+1];let n=this.grid.find((e=>e.X==t&&e.Y==a.yStart));n.containsShip=!0,n.ship=a,o.push(n),e-=1}else if("west"==i){t=this.xAxis[this.xAxis.indexOf(t)-1];let n=this.grid.find((e=>e.X==t&&e.Y==a.yStart));n.containsShip=!0,n.ship=a,o.push(n),e-=1}return o}}let B=new m,x=new m,y=new class{constructor(e,t,n,i){this.playerBoard=e,this.player=t,this.aiBoard=n,this.ai=i,Z(this.playerBoard,this.aiBoard),Q("Player",0,"AI",0)}populatePlayer(e,t,n,i){}simplePopulate(){this.playerBoard.populateShip(2,"I",4,"east"),this.playerBoard.populateShip(4,"C",5,"east"),this.playerBoard.populateShip(3,"J",6,"south"),this.playerBoard.populateShip(3,"B",8,"south"),this.playerBoard.populateShip(2,"E",9,"east");let e=document.getElementById("container");e.removeChild(e.firstChild),Z(this.playerBoard,this.aiBoard)}simplePopulateAI(){this.aiBoard.populateShip(2,"I",4,"east"),this.aiBoard.populateShip(4,"C",5,"east"),this.aiBoard.populateShip(3,"J",6,"south"),this.aiBoard.populateShip(3,"B",8,"south"),this.aiBoard.populateShip(2,"E",9,"east");let e=document.getElementById("container");e.removeChild(e.firstChild),Z(this.playerBoard,this.aiBoard)}attackAI(e,t){if(this.aiBoard.X==e||this.aiBoard.Y==t)return console.log("repeat hit");this.aiBoard.receiveAttack(e,t),container.removeChild(container.firstChild),Z(this.playerBoard,this.aiBoard),this.keepScore()}attackPlayer(e,t){this.playerBoard.receiveAttack(e,t),container.removeChild(container.firstChild),Z(this.playerBoard,this.aiBoard),this.keepScore()}produceArrayOfPlayerShips(){let e=[];this.playerBoard.grid.forEach((t=>{null!=t.ship&&e.push(t.ship)}));let t=[];return e.forEach((e=>{t.includes(e)||t.push(e)})),t}produceArrayOfAiShips(){let e=[];this.aiBoard.grid.forEach((t=>{null!=t.ship&&e.push(t.ship)}));let t=[];return e.forEach((e=>{t.includes(e)||t.push(e)})),t}keepScore(){let e=this.produceArrayOfPlayerShips(),t=this.produceArrayOfAiShips(),n=0,i=0;e.forEach((e=>{e.hits.length==e.size&&(n+=1)})),t.forEach((e=>{e.hits.length==e.size&&(i+=1)})),container.removeChild(container.firstChild.nextSibling),Q("AI",n,"Player",i),5==n?R("AI wins!"):5==i&&R("You win!")}randomParameterProducer(){return[this.playerBoard.xAxis[Math.trunc(10*Math.random())],this.playerBoard.yAxis[Math.trunc(10*Math.random())]]}}(B,"taylor",x,"computer");const g=document.createElement("button");g.addEventListener("click",(function(){y.simplePopulate()})),g.classList.add("populateButton"),g.textContent="Populate Player";const I=document.createElement("button");I.addEventListener("click",(function(){y.simplePopulateAI()})),I.classList.add("populateButton"),I.textContent="Populate AI";const v=document.createElement("button");v.addEventListener("click",E),v.classList.add("populateButton"),v.textContent="Attack AI";const b=document.createElement("button");b.addEventListener("click",w),b.classList.add("populateButton"),b.textContent="Attack Player";const S=y.playerBoard.grid.slice();function E(e,t){let n=y.aiBoard.grid.find((n=>n.X==e&&n.Y==t));if(console.log(n),1==n.isHit&&alert("You have already attacked that square! Try another."),0==n.isHit){let i=y.aiBoard.grid.indexOf(n);S.splice(i,1),y.attackAI(e,t),setTimeout((()=>{w()}),"500")}}const k=y.playerBoard.grid.slice();function w(){if(0==k.length)return alert("game over!");let e=k[Math.floor(Math.random()*k.length)],t=e.X,n=e.Y,i=k.indexOf(e);k.splice(i,1),y.attackPlayer(t,n)}let L=document.createElement("label");L.classList.add("attackLabel"),L.textContent="Input X Coordinate: ";let Y=document.createElement("input");Y.setAttribute("type","text");let j=document.createElement("label");j.classList.add("attackLabel"),j.textContent="Input Y Coordinate: ";let q=document.createElement("input");function P(e,t){let n=e.grid,i=document.createElement("div");return i.classList.add("grid-container"),n.forEach((e=>{let n=function(e,t="ai"){let n=document.createElement("div");return n.classList.add("square"),1==e.isHit&&(n.style.backgroundColor="#6ee7b7"),"ai"==t?(n.addEventListener("click",(function(){let t=e.X,n=e.Y;E(t,n),console.log(t+n)})),1==e.isHit&&1==e.containsShip&&(n.style.backgroundColor="red",n.textContent="X")):1==e.containsShip&&(n.style.backgroundColor="red"),n}(e,t);i.appendChild(n)})),i}function M(){let e=document.createElement("div");return e.classList.add("xCoordinateContainer"),["A","B","C","D","E","F","G","H","I","J"].forEach((t=>{let n=document.createElement("div");n.classList.add("upperSquare"),n.textContent=t,e.appendChild(n)})),e}function O(){let e=document.createElement("div");return e.classList.add("yCoordinateContainer"),[1,2,3,4,5,6,7,8,9,10].forEach((t=>{let n=document.createElement("div");n.classList.add("leftSquare"),n.textContent=t,e.appendChild(n)})),e}function X(e,t){let n=document.createElement("div");return n.classList.add("doubleBoardContainer"),n.appendChild(function(e){let t=document.createElement("div");t.classList.add("singleBoardContainer");let n=document.createElement("div");return n.classList.add("subcontainer"),n.appendChild(O()),n.appendChild(P(e,"player")),t.appendChild(M()),t.appendChild(n),t}(e)),n.appendChild(function(e){let t=document.createElement("div");t.classList.add("singleBoardContainer");let n=document.createElement("div");return n.classList.add("subcontainer"),n.appendChild(O()),n.appendChild(P(e)),t.appendChild(M()),t.appendChild(n),t}(t)),n}function Z(e,t){document.getElementById("container").prepend(X(e,t))}function T(e,t){let n=document.createElement("div");n.classList.add("singleBoardScoreContainer");let i=document.createElement("div"),a=document.createElement("div");return i.textContent=e+" score: ",n.appendChild(i),n.appendChild(a),a.textContent=t+"/5",n}function Q(e,t,n,i){let a=document.createElement("div");a.classList.add("scoreKeeperContainer"),a.appendChild(T(e,t)),a.appendChild(T(n,i)),document.getElementById("container").appendChild(a)}function R(e){let t=document.createElement("div");t.classList.add("winnerCard"),t.textContent=e,container.firstChild.appendChild(t)}q.setAttribute("type","text"),document.createElement("div").classList.add("placement-module-container"),document.body.appendChild(function(){let e=document.createElement("div");return e.classList.add("buttonContainer"),e.appendChild(g),e.appendChild(I),e.appendChild(b),e.appendChild(v),e}()),document.body.appendChild(function(){let e=document.createElement("div");return e.classList.add("formContainer"),e.appendChild(function(){let e=document.createElement("div");return e.classList.add("formContainer"),e.appendChild(L),e.appendChild(Y),e}()),e.appendChild(function(){let e=document.createElement("div");return e.classList.add("formContainer"),e.appendChild(j),e.appendChild(q),e}()),e}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,