(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>l});var i=t(537),a=t.n(i),r=t(645),o=t.n(r)()(a());o.push([e.id,"html,\nbody {\n    margin: 0;\n    height: 100%;\n}\nbody {\n    position: relative;\n}\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n    position: relative\n}\n/*styles for the placement module */\n.placement-module-container {\n    position: relative;\n    /*bottom: 70vh;\n    left: 59.5vh;\n    width: 430px;*/\n    bottom: 70vh;\n    left: 10vh;\n    width: 75%;\n    background-color: grey;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n    padding-right: 30px;\n    border-radius: 10px;\n}\n.placement-module-subcontainer, .rightInfoSubcontainer {\n    display: flex;\n    align-items: center;\n    padding: 10px;\n}\n.rightInfoSubcontainer {\n    gap: 10px;\n}\n.shipAllClassesContainer {\n    display: flex;\n    flex-direction: row;\n    grid-template-columns: repeat(5, 1fr);\n    background-color: rgba(0, 0, 255, 0);\n    gap: 20px;\n    \n}\n.singleShipClassContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n.ship {\n    display: flex;\n    flex-direction: row;\n    gap: 3px;\n    border: solid black 2px;\n}\n\n/*styles for the two grids and coordinates */\n.doubleBoardContainer {\n    display: flex;\n    gap: 175px;\n    padding: 10px;\n}\n.singleBoardContainer {\n    display: flex;\n    flex-direction: column;\n}\n.xCoordinateContainer {\n    display: flex;\n    gap: 3px;\n    margin-left: 35px;\n    margin-bottom: -10px;\n}\n.yCoordinateContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n    margin-top: 10px;\n}\n.leftSquare {\n    display: flex;\n    justify-content: center;\n}\n.leftSquare, .upperSquare {\n    height: 35px;\n    width: 35px;\n    display: flex;\n    justify-content: center;\n}\n.subcontainer {\n    display: flex;\n}\n.placementSquare {\n    height: 35px;\n    width: 35px;\n    background-color: red;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    opacity: 1;\n}\n.square {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.square:hover, .placementSquare:hover {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #cbd5e1;\n}\n.squareContainer {\n\n}\n.grid-container {\n    height: 350px;\n    width: 350px;\n    display: grid;\n    grid-template-columns: repeat(10, 35px);\n    grid-template-rows: repeat(10, 35px);\n    grid-auto-flow: column;\n    gap: 3px;\n}\n/* styles for score card */\n.singleBoardScoreContainer {\n    display: flex;\n    gap: 5px;\n    justify-content: left;\n}\n\n/*styles for game controller hud*/\n.populateButton, .shiftShipButton {\n    height: 40px;\n    width: 60px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.buttonContainer {\n    display: flex;\n    gap: 15px;\n    justify-content: center;\n}\n.formContainer {\n    display: flex;\n    justify-content: center;\n    gap: 5px;\n    margin: 10px;\n}\n.winnerCard {\n    position: absolute;\n    background-color: red;\n    top: 35%;\n    left: 49%;\n}\n.selectSquare {\n    \n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,YAAY;AAChB;AACA;IACI,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;IACZ;AACJ;AACA,mCAAmC;AACnC;IACI,kBAAkB;IAClB;;kBAEc;IACd,YAAY;IACZ,UAAU;IACV,UAAU;IACV,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,mBAAmB;IACnB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,aAAa;AACjB;AACA;IACI,SAAS;AACb;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,qCAAqC;IACrC,oCAAoC;IACpC,SAAS;;AAEb;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,QAAQ;IACR,uBAAuB;AAC3B;;AAEA,4CAA4C;AAC5C;IACI,aAAa;IACb,UAAU;IACV,aAAa;AACjB;AACA;IACI,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,aAAa;IACb,QAAQ;IACR,iBAAiB;IACjB,oBAAoB;AACxB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,aAAa;AACjB;AACA;IACI,YAAY;IACZ,WAAW;IACX,qBAAqB;IACrB,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,UAAU;AACd;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,yBAAyB;AAC7B;AACA;;AAEA;AACA;IACI,aAAa;IACb,YAAY;IACZ,aAAa;IACb,uCAAuC;IACvC,oCAAoC;IACpC,sBAAsB;IACtB,QAAQ;AACZ;AACA,0BAA0B;AAC1B;IACI,aAAa;IACb,QAAQ;IACR,qBAAqB;AACzB;;AAEA,iCAAiC;AACjC;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,SAAS;IACT,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,QAAQ;IACR,YAAY;AAChB;AACA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,QAAQ;IACR,SAAS;AACb;AACA;;AAEA",sourcesContent:["html,\nbody {\n    margin: 0;\n    height: 100%;\n}\nbody {\n    position: relative;\n}\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n    position: relative\n}\n/*styles for the placement module */\n.placement-module-container {\n    position: relative;\n    /*bottom: 70vh;\n    left: 59.5vh;\n    width: 430px;*/\n    bottom: 70vh;\n    left: 10vh;\n    width: 75%;\n    background-color: grey;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 10px;\n    padding-right: 30px;\n    border-radius: 10px;\n}\n.placement-module-subcontainer, .rightInfoSubcontainer {\n    display: flex;\n    align-items: center;\n    padding: 10px;\n}\n.rightInfoSubcontainer {\n    gap: 10px;\n}\n.shipAllClassesContainer {\n    display: flex;\n    flex-direction: row;\n    grid-template-columns: repeat(5, 1fr);\n    background-color: rgba(0, 0, 255, 0);\n    gap: 20px;\n    \n}\n.singleShipClassContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n.ship {\n    display: flex;\n    flex-direction: row;\n    gap: 3px;\n    border: solid black 2px;\n}\n\n/*styles for the two grids and coordinates */\n.doubleBoardContainer {\n    display: flex;\n    gap: 175px;\n    padding: 10px;\n}\n.singleBoardContainer {\n    display: flex;\n    flex-direction: column;\n}\n.xCoordinateContainer {\n    display: flex;\n    gap: 3px;\n    margin-left: 35px;\n    margin-bottom: -10px;\n}\n.yCoordinateContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n    margin-top: 10px;\n}\n.leftSquare {\n    display: flex;\n    justify-content: center;\n}\n.leftSquare, .upperSquare {\n    height: 35px;\n    width: 35px;\n    display: flex;\n    justify-content: center;\n}\n.subcontainer {\n    display: flex;\n}\n.placementSquare {\n    height: 35px;\n    width: 35px;\n    background-color: red;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    opacity: 1;\n}\n.square {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.square:hover, .placementSquare:hover {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #cbd5e1;\n}\n.squareContainer {\n\n}\n.grid-container {\n    height: 350px;\n    width: 350px;\n    display: grid;\n    grid-template-columns: repeat(10, 35px);\n    grid-template-rows: repeat(10, 35px);\n    grid-auto-flow: column;\n    gap: 3px;\n}\n/* styles for score card */\n.singleBoardScoreContainer {\n    display: flex;\n    gap: 5px;\n    justify-content: left;\n}\n\n/*styles for game controller hud*/\n.populateButton, .shiftShipButton {\n    height: 40px;\n    width: 60px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.buttonContainer {\n    display: flex;\n    gap: 15px;\n    justify-content: center;\n}\n.formContainer {\n    display: flex;\n    justify-content: center;\n    gap: 5px;\n    margin: 10px;\n}\n.winnerCard {\n    position: absolute;\n    background-color: red;\n    top: 35%;\n    left: 49%;\n}\n.selectSquare {\n    \n}"],sourceRoot:""}]);const l=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",i=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),i&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),i&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,i,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(i)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(o[s]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);i&&o[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),n.push(c))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(a," */"),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([r]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,i=0;i<n.length;i++)if(n[i].identifier===e){t=i;break}return t}function i(e,i){for(var r={},o=[],l=0;l<e.length;l++){var s=e[l],d=i.base?s[0]+i.base:s[0],c=r[d]||0,p="".concat(d," ").concat(c);r[d]=c+1;var A=t(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(u);else{var h=a(u,i);i.byIndex=l,n.splice(l,0,{identifier:p,updater:h,references:1})}o.push(p)}return o}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var r=i(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var l=t(r[o]);n[l].references--}for(var s=i(e,a),d=0;d<r.length;d++){var c=t(r[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}r=s}}},569:e=>{var n={};e.exports=function(e,t){var i=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var i="";t.supports&&(i+="@supports (".concat(t.supports,") {")),t.media&&(i+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(i+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),i+=t.css,a&&(i+="}"),t.media&&(i+="}"),t.supports&&(i+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(i,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(i){var a=n[i];if(void 0!==a)return a.exports;var r=n[i]={id:i,exports:{}};return e[i](r,r.exports,t),r.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var i in n)t.o(n,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:n[i]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),i=t(795),a=t.n(i),r=t(569),o=t.n(r),l=t(565),s=t.n(l),d=t(216),c=t.n(d),p=t(589),A=t.n(p),u=t(426),h={};h.styleTagTransform=A(),h.setAttributes=s(),h.insert=o().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=c(),n()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;class C{constructor(e,n,t,i){this.size=e,this.hits=[],this.xStart=n,this.yStart=t}hit(){return this.hits.push("hit"),this.hits.length==this.size?this.isSunk():this.hit}isSunk(){return"sunk!"}}class f{constructor(e,n){this.X=e,this.Y=n,this.isHit=!1,this.containsShip=!1,this.ship=null,this.start=null}}class m{constructor(e){this.xAxis=["A","B","C","D","E","F","G","H","I","J"],this.yAxis=[1,2,3,4,5,6,7,8,9,10],this.grid=this.makeGrid()}receiveAttack(e,n){let t=this.grid.find((t=>t.X==e&&t.Y==n));return t.isHit=!0,1==t.containsShip?(t.ship.hit(),t.ship):t.ship}makeGrid(){let e=[];for(let n=0;n<this.xAxis.length;n++)for(let t=0;t<this.yAxis.length;t++){let i=new f(this.xAxis[n],this.yAxis[t]);e.push(i)}return e}populateShip(e,n,t,i){if(e>1){if("north"==i&&t<e)return console.log("overflow at "+n+t),"overflow!";if("south"==i&&t-1>10-e)return console.log("overflow at "+n+t),"overflow!";if("west"==i&&this.xAxis.indexOf(n)<e-1)return console.log("overflow at "+n+t),"overflow!";if("east"==i&&this.xAxis.indexOf(n)>10-e)return console.log("overflow at "+n+t),"overflow!"}let a=new C(e,n,t),r=this.grid.find((e=>e.X==a.xStart&&e.Y==a.yStart)),o=[];r.containsShip=!0,r.ship=a,console.log(this.grid.indexOf(r)),console.log(this.grid[this.grid.indexOf(r)+1]),o.push(r);let l=this.grid.indexOf(r);for(;e>1;){if("north"==i){t-=1;let n=this.grid.find((e=>e.X==a.xStart&&e.Y==t));n.containsShip=!0,n.ship=a,o.push(n),e-=1}if("south"==i){l+=1;let n=this.grid[l];n.containsShip=!0,n.ship=a,o.push(n),e-=1}else if("east"==i){n=this.xAxis[this.xAxis.indexOf(n)+1];let t=this.grid.find((e=>e.X==n&&e.Y==a.yStart));t.containsShip=!0,t.ship=a,o.push(t),e-=1}else if("west"==i){n=this.xAxis[this.xAxis.indexOf(n)-1];let t=this.grid.find((e=>e.X==n&&e.Y==a.yStart));t.containsShip=!0,t.ship=a,o.push(t),e-=1}}return o}depopulateShip(e,n,t,i){let a=new C(e,n,t),r=this.grid.find((e=>e.X==a.xStart&&e.Y==a.yStart)),o=[];r.containsShip=!1,r.ship=null,o.push(r);let l=this.grid.indexOf(r);for(;e>1;){if("north"==i){t-=1;let n=this.grid.find((e=>e.X==a.xStart&&e.Y==t));n.containsShip=!1,n.ship=null,o.push(n),e-=1}if("south"==i){l+=1;let n=this.grid[l];n.containsShip=!1,n.ship=null,o.push(n),e-=1}else if("east"==i){n=this.xAxis[this.xAxis.indexOf(n)+1];let t=this.grid.find((e=>e.X==n&&e.Y==a.yStart));t.containsShip=!1,t.ship=null,o.push(t),e-=1}else if("west"==i){n=this.xAxis[this.xAxis.indexOf(n)-1];let t=this.grid.find((e=>e.X==n&&e.Y==a.yStart));t.containsShip=!1,t.ship=null,o.push(t),e-=1}}return o}}let g=new m,x=new m,B=new class{constructor(e,n,t,i){this.playerBoard=e,this.player=n,this.aiBoard=t,this.ai=i,T(this.playerBoard,this.aiBoard),Q("Player",0,"AI",0)}populatePlayer(e,n,t,i){this.playerBoard.populateShip(e,n,t,i);let a=document.getElementById("container");a.removeChild(a.firstChild),T(this.playerBoard,this.aiBoard)}simplePopulate(){this.playerBoard.populateShip(2,"I",4,"east"),this.playerBoard.populateShip(4,"C",5,"east"),this.playerBoard.populateShip(3,"J",6,"south"),this.playerBoard.populateShip(3,"B",8,"south"),this.playerBoard.populateShip(2,"E",9,"east");let e=document.getElementById("container");e.removeChild(e.firstChild),T(this.playerBoard,this.aiBoard)}simplePopulateAI(){this.aiBoard.populateShip(2,"I",4,"east"),this.aiBoard.populateShip(4,"C",5,"east"),this.aiBoard.populateShip(3,"J",6,"south"),this.aiBoard.populateShip(3,"B",8,"south"),this.aiBoard.populateShip(2,"E",9,"east");let e=document.getElementById("container");e.removeChild(e.firstChild),T(this.playerBoard,this.aiBoard)}attackAI(e,n){if(this.aiBoard.X==e||this.aiBoard.Y==n)return console.log("repeat hit");this.aiBoard.receiveAttack(e,n),container.removeChild(container.firstChild),T(this.playerBoard,this.aiBoard),this.keepScore()}attackPlayer(e,n){this.playerBoard.receiveAttack(e,n),container.removeChild(container.firstChild),T(this.playerBoard,this.aiBoard),this.keepScore()}produceArrayOfPlayerShips(){let e=[];this.playerBoard.grid.forEach((n=>{null!=n.ship&&e.push(n.ship)}));let n=[];return e.forEach((e=>{n.includes(e)||n.push(e)})),n}produceArrayOfAiShips(){let e=[];this.aiBoard.grid.forEach((n=>{null!=n.ship&&e.push(n.ship)}));let n=[];return e.forEach((e=>{n.includes(e)||n.push(e)})),n}keepScore(){let e=this.produceArrayOfPlayerShips(),n=this.produceArrayOfAiShips(),t=0,i=0;e.forEach((e=>{e.hits.length==e.size&&(t+=1)})),n.forEach((e=>{e.hits.length==e.size&&(i+=1)})),container.removeChild(container.firstChild.nextSibling),Q("AI",t,"Player",i),5==t?Z("AI wins!"):5==i&&Z("You win!")}randomParameterProducer(){return[this.playerBoard.xAxis[Math.trunc(10*Math.random())],this.playerBoard.yAxis[Math.trunc(10*Math.random())]]}}(g,"taylor",x,"computer");const y=document.createElement("button");y.addEventListener("click",(function(){B.simplePopulate()})),y.classList.add("populateButton"),y.textContent="Populate Player";const I=document.createElement("button");I.addEventListener("click",(function(){B.simplePopulateAI()})),I.classList.add("populateButton"),I.textContent="Populate AI";const v=document.createElement("button");v.addEventListener("click",E),v.classList.add("populateButton"),v.textContent="Attack AI";const b=document.createElement("button");b.addEventListener("click",L),b.classList.add("populateButton"),b.textContent="Attack Player";const S=B.playerBoard.grid.slice();function E(e,n){let t=B.aiBoard.grid.find((t=>t.X==e&&t.Y==n));if(console.log(t),1==t.isHit&&alert("You have already attacked that square! Try another."),0==t.isHit){let i=B.aiBoard.grid.indexOf(t);S.splice(i,1),B.attackAI(e,n),setTimeout((()=>{L()}),"500")}}const k=B.playerBoard.grid.slice();function L(){if(0==k.length)return alert("game over!");let e=k[Math.floor(Math.random()*k.length)],n=e.X,t=e.Y,i=k.indexOf(e);k.splice(i,1),B.attackPlayer(n,t)}let w=document.createElement("label");w.classList.add("attackLabel"),w.textContent="Input X Coordinate: ";let Y=document.createElement("input");Y.setAttribute("type","text");let j=document.createElement("label");j.classList.add("attackLabel"),j.textContent="Input Y Coordinate: ";let q=document.createElement("input");function P(e,n){let t=e.grid,i=document.createElement("div");return i.classList.add("grid-container"),t.forEach((e=>{let t=function(e,n="ai"){let t=document.createElement("div");return t.classList.add("square"),1==e.isHit&&(t.style.backgroundColor="#6ee7b7"),"ai"==n&&t.addEventListener("click",(function(){let n=e.X,t=e.Y;E(n,t),console.log(n+t)})),1==e.isHit&&1==e.containsShip&&(t.style.backgroundColor="red",t.textContent="X"),1==e.containsShip&&(t.style.backgroundColor="red"),t}(e,n);i.appendChild(t)})),i}function O(){let e=document.createElement("div");return e.classList.add("xCoordinateContainer"),["A","B","C","D","E","F","G","H","I","J"].forEach((n=>{let t=document.createElement("div");t.classList.add("upperSquare"),t.textContent=n,e.appendChild(t)})),e}function X(){let e=document.createElement("div");return e.classList.add("yCoordinateContainer"),[1,2,3,4,5,6,7,8,9,10].forEach((n=>{let t=document.createElement("div");t.classList.add("leftSquare"),t.textContent=n,e.appendChild(t)})),e}function T(e,n){document.getElementById("container").prepend(function(e,n){let t=document.createElement("div");return t.classList.add("doubleBoardContainer"),t.appendChild(function(e){let n=document.createElement("div");n.classList.add("singleBoardContainer");let t=document.createElement("div");return t.classList.add("subcontainer"),t.appendChild(X()),t.appendChild(P(e,"player")),n.appendChild(O()),n.appendChild(t),n}(e)),t.appendChild(function(e){let n=document.createElement("div");n.classList.add("singleBoardContainer");let t=document.createElement("div");return t.classList.add("subcontainer"),t.appendChild(X()),t.appendChild(P(e)),n.appendChild(O()),n.appendChild(t),n}(n)),t}(e,n))}function M(e,n){let t=document.createElement("div");t.classList.add("singleBoardScoreContainer");let i=document.createElement("div"),a=document.createElement("div");return i.textContent=e+" score: ",t.appendChild(i),t.appendChild(a),a.textContent=n+"/5",t}function Q(e,n,t,i){let a=document.createElement("div");a.classList.add("scoreKeeperContainer"),a.appendChild(M(e,n)),a.appendChild(M(t,i)),document.getElementById("container").appendChild(a)}function Z(e){let n=document.createElement("div");n.classList.add("winnerCard"),n.textContent=e,container.firstChild.appendChild(n)}q.setAttribute("type","text");let R=document.createElement("div");R.classList.add("placement-module-container"),R.setAttribute("id","placementContainer");const U=new m,z=[];function D(e){for(;e.firstChild;)e.removeChild(e.firstChild)}const H="";function J(e){let n=document.createElement("div");for(n.classList.add("ship"),n.setAttribute("draggable","true"),n.setAttribute("id",e);e>=1;){let t=document.createElement("div");t.classList.add("placementSquare"),n.appendChild(t),e-=1}return n.addEventListener("dragstart",W),n.addEventListener("dragend",(function(e){e.target.classList.remove("dragging")})),n}function W(e){e.currentTarget.classList.add("dragging"),e.dataTransfer.clearData(),e.dataTransfer.setData("text/plain",e.target.id);const n=e.dataTransfer.getData("text");console.log(n),H=document.getElementById(n),console.log(H),e.currentTarget.removeEventListener("dragend",W)}document.body.appendChild(function(){let e=document.createElement("div");return e.classList.add("buttonContainer"),e.appendChild(y),e.appendChild(I),e.appendChild(b),e.appendChild(v),e}()),document.body.appendChild(function(){let e=document.createElement("div");return e.classList.add("formContainer"),e.appendChild(function(){let e=document.createElement("div");return e.classList.add("formContainer"),e.appendChild(w),e.appendChild(Y),e}()),e.appendChild(function(){let e=document.createElement("div");return e.classList.add("formContainer"),e.appendChild(j),e.appendChild(q),e}()),e}()),function e(){R.appendChild(function(){let e=document.createElement("div");return e.classList.add("placementText"),e.textContent="Place Your Ships",e}());let n=document.createElement("div");n.classList.add("placement-module-subcontainer"),n.appendChild(function(n){let t=document.createElement("div");t.classList.add("singleBoardContainer");let i=document.createElement("div");return i.classList.add("subcontainer"),i.appendChild(X()),i.appendChild(function(n){let t=n.grid,i=document.createElement("div");return i.classList.add("grid-container"),t.forEach((n=>{let t=function(n){let t=document.createElement("div");return t.classList.add("square"),1==n.containsShip&&(t.style.backgroundColor="red",t.addEventListener("click",(function(){let n=t.id.split(""),i=U.grid.find((e=>e.X==n[0]&&e.Y==n[1])),a=i.ship.size,r=i.ship.xStart,o=i.ship.yStart;U.depopulateShip(a,r,o,"east"),U.populateShip(a,r,o,"south"),D(R),document.body.removeChild(R),e()}))),t.setAttribute("id",n.X+n.Y),t.addEventListener("dragover",(function(e){console.log("dragOver"),e.preventDefault()})),t.addEventListener("drop",(function(n){console.log("Drop"),n.preventDefault();let t=n.dataTransfer.getData("text"),i=(document.getElementById(t),n.target.id),a=t,r=i[0],o=i[1];!function(e,n,t,i){B.populatePlayer(e,n,t,"east")}(a,r,o),U.populateShip(a,r,o,"east"),D(R),document.body.removeChild(R),z.push(a),e()})),t}(n);i.appendChild(t)})),i}(n)),t.appendChild(O()),t.appendChild(i),t}(U)),n.appendChild(function(){let e=document.createElement("div");return e.classList.add("rightInfoSubcontainer"),e.appendChild(function(){let e=document.createElement("button");return e.classList.add("shiftShipButton"),e.textContent="Clear Ships",e}()),e.appendChild(function(){let e=document.createElement("div");return e.textContent="Include Directions Here",e}()),e}()),R.appendChild(n),R.appendChild(function(){let e=document.createElement("div");e.classList.add("shipAllClassesContainer");let n=document.createElement("div");n.classList.add("singleShipClassContainer");let t=document.createElement("div");t.classList.add("singleShipClassContainer");let i=document.createElement("div");return i.classList.add("singleShipClassContainer"),0==z.filter((e=>2==e)).length?(n.appendChild(J(2)),n.appendChild(J(2)),e.appendChild(n)):1==z.filter((e=>2==e)).length&&(n.appendChild(J(2)),e.appendChild(n)),0==z.filter((e=>3==e)).length?(t.appendChild(J(3)),t.appendChild(J(3)),e.appendChild(t)):1==z.filter((e=>3==e)).length&&(t.appendChild(J(3)),e.appendChild(t)),0==z.filter((e=>4==e)).length&&(i.appendChild(J(4)),e.appendChild(i)),e}()),document.body.appendChild(R)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,