(()=>{"use strict";var t={426:(t,n,e)=>{e.d(n,{Z:()=>a});var r=e(537),i=e.n(r),s=e(645),o=e.n(s)()(i());o.push([t.id,"html,\nbody {\n    margin: 0;\n    height: 100%;\n}\nbody {\n\n}\n.boards-container {\n    display: flex;\n    flex-direction: row;\n}\n.square {\n    border: solid black;\n    color: black;\n    padding: 3px;\n}\n.grid-container {\n    margin: 10px;\n    height: 600px;\n    width: 600px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    grid-auto-flow: column;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,YAAY;AAChB;AACA;;AAEA;AACA;IACI,aAAa;IACb,mBAAmB;AACvB;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,YAAY;AAChB;AACA;IACI,YAAY;IACZ,aAAa;IACb,YAAY;IACZ,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,sBAAsB;AAC1B",sourcesContent:["html,\nbody {\n    margin: 0;\n    height: 100%;\n}\nbody {\n\n}\n.boards-container {\n    display: flex;\n    flex-direction: row;\n}\n.square {\n    border: solid black;\n    color: black;\n    padding: 3px;\n}\n.grid-container {\n    margin: 10px;\n    height: 600px;\n    width: 600px;\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    grid-template-rows: repeat(10, 1fr);\n    grid-auto-flow: column;\n}"],sourceRoot:""}]);const a=o},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,i,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(o[c]=!0)}for(var d=0;d<t.length;d++){var p=[].concat(t[d]);r&&o[p[0]]||(void 0!==s&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=s),e&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=e):p[2]=e),i&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=i):p[4]="".concat(i)),n.push(p))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(i," */"),o=e.sources.map((function(t){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(t," */")}));return[n].concat(o).concat([s]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var s={},o=[],a=0;a<t.length;a++){var c=t[a],d=r.base?c[0]+r.base:c[0],p=s[d]||0,u="".concat(d," ").concat(p);s[d]=p+1;var l=e(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==l)n[l].references++,n[l].updater(h);else{var f=i(h,r);r.byIndex=a,n.splice(a,0,{identifier:u,updater:f,references:1})}o.push(u)}return o}function i(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,i){var s=r(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var a=e(s[o]);n[a].references--}for(var c=r(t,i),d=0;d<s.length;d++){var p=e(s[d]);0===n[p].references&&(n[p].updater(),n.splice(p,1))}s=c}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,i&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var s=e.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(r){var i=n[r];if(void 0!==i)return i.exports;var s=n[r]={id:r,exports:{}};return t[r](s,s.exports,e),s.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0,(()=>{var t=e(379),n=e.n(t),r=e(795),i=e.n(r),s=e(569),o=e.n(s),a=e(565),c=e.n(a),d=e(216),p=e.n(d),u=e(589),l=e.n(u),h=e(426),f={};f.styleTagTransform=l(),f.setAttributes=c(),f.insert=o().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=p(),n()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;class A{constructor(t,n,e,r){this.size=t,this.hits=[],this.xStart=n,this.yStart=e}hit(){return this.hits.push("hit"),this.hits.length==this.size?this.isSunk():this.hit}isSunk(){return"sunk!"}}class m{constructor(t,n){this.X=t,this.Y=n,this.isHit=!1,this.containsShip=!1,this.ship=null}}class v{constructor(t){this.xAxis=["A","B","C","D","E","F","G","H","I","J"],this.yAxis=[1,2,3,4,5,6,7,8,9,10],this.grid=this.makeGrid()}receiveAttack(t,n){let e=this.grid.find((e=>e.X==t&&e.Y==n));return e.isHit=!0,1==e.containsShip?(e.ship.hit(),e.ship):e.ship}makeGrid(){let t=[];for(let n=0;n<this.xAxis.length;n++)for(let e=0;e<this.yAxis.length;e++){let r=new m(this.xAxis[n],this.yAxis[e]);t.push(r)}return t}populateShip(t,n,e,r){if(t>1){if("north"==r&&e>9-t+1)return"overflow!";if("south"==r&&e<t-1)return"overflow!";if("west"==r&&this.xAxis.indexOf(n)<t-1)return"overflow!";if("east"==r&&this.xAxis.indexOf(n)>9-t+1)return"overflow!"}let i=new A(t,n,e),s=this.grid.find((t=>t.X==i.xStart&&t.Y==i.yStart)),o=[];for(s.containsShip=!0,s.ship=i,o.push(s);t>1;)if("north"==r){e+=1;let n=this.grid.find((t=>t.X==i.xStart&&t.Y==e));n.containsShip=!0,n.ship=i,o.push(n),t-=1}else if("south"==r){e-=1;let n=this.grid.find((t=>t.X==i.xStart&&t.Y==e));n.containsShip=!0,n.ship=i,o.push(n),t-=1}else if("east"==r){n=this.xAxis[this.xAxis.indexOf(n)+1];let e=this.grid.find((t=>t.X==n&&t.Y==i.yStart));e.containsShip=!0,e.ship=i,o.push(e),t-=1}else if("west"==r){n=this.xAxis[this.xAxis.indexOf(n)-1];let e=this.grid.find((t=>t.X==n&&t.Y==i.yStart));e.containsShip=!0,e.ship=i,o.push(e),t-=1}return o}}function x(t){let n=t.grid,e=document.createElement("div");return e.classList.add("grid-container"),n.forEach((t=>{let n=function(t){let n=document.createElement("div");return n.classList.add("square"),n.textContent=t.X+t.Y,n}(t);e.appendChild(n)})),e}new class{constructor(t,n,e){this.playerBoard=new v,this.player=n,this.opponentBoard=new v,this.opponent=e,function(t,n){let e=document.createElement("div");e.classList.add("boards-container"),e.appendChild(x(t)),e.appendChild(x(n)),document.body.appendChild(e)}(this.playerBoard,this.opponentBoard)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,