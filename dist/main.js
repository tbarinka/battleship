(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var i=n(537),a=n.n(i),r=n(645),o=n.n(r)()(a());o.push([t.id,"html,\nbody {\n    margin: 0;\n    height: 100%;\n}\nbody {\n\n}\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n}\n/*styles for the two grids and coordinates */\n.doubleBoardContainer {\n    display: flex;\n    gap: 175px;\n    padding: 10px;\n}\n.singleBoardContainer {\n    display: flex;\n    flex-direction: column;\n}\n.xCoordinateContainer {\n    display: flex;\n    gap: 3px;\n    margin-left: 35px;\n    margin-bottom: -10px;\n}\n.yCoordinateContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n    margin-top: 10px;\n}\n.leftSquare {\n    display: flex;\n    justify-content: center;\n}\n.leftSquare, .upperSquare {\n    height: 35px;\n    width: 35px;\n    display: flex;\n    justify-content: center;\n}\n.subcontainer {\n    display: flex;\n}\n.square {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.grid-container {\n    height: 350px;\n    width: 350px;\n    display: grid;\n    grid-template-columns: repeat(10, 35px);\n    grid-template-rows: repeat(10, 35px);\n    grid-auto-flow: column;\n    gap: 3px;\n}\n/* styles for score card */\n.singleBoardScoreContainer {\n    display: flex;\n    gap: 5px;\n    justify-content: left;\n}\n\n/*styles for game controller hud*/\n.populateButton {\n    height: 40px;\n    width: 60px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.buttonContainer {\n    display: flex;\n    gap: 15px;\n    justify-content: center;\n}\n.formContainer {\n    display: flex;\n    justify-content: center;\n    gap: 5px;\n    margin: 10px;\n}\n.winnerCard {\n    position: absolute;\n    background-color: red;\n    top: 35%;\n    left: 49%;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,YAAY;AAChB;AACA;;AAEA;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;AAChB;AACA,4CAA4C;AAC5C;IACI,aAAa;IACb,UAAU;IACV,aAAa;AACjB;AACA;IACI,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,aAAa;IACb,QAAQ;IACR,iBAAiB;IACjB,oBAAoB;AACxB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,aAAa;AACjB;AACA;IACI,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,YAAY;IACZ,aAAa;IACb,uCAAuC;IACvC,oCAAoC;IACpC,sBAAsB;IACtB,QAAQ;AACZ;AACA,0BAA0B;AAC1B;IACI,aAAa;IACb,QAAQ;IACR,qBAAqB;AACzB;;AAEA,iCAAiC;AACjC;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,SAAS;IACT,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,QAAQ;IACR,YAAY;AAChB;AACA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,QAAQ;IACR,SAAS;AACb",sourcesContent:["html,\nbody {\n    margin: 0;\n    height: 100%;\n}\nbody {\n\n}\n#container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin: 10px;\n}\n/*styles for the two grids and coordinates */\n.doubleBoardContainer {\n    display: flex;\n    gap: 175px;\n    padding: 10px;\n}\n.singleBoardContainer {\n    display: flex;\n    flex-direction: column;\n}\n.xCoordinateContainer {\n    display: flex;\n    gap: 3px;\n    margin-left: 35px;\n    margin-bottom: -10px;\n}\n.yCoordinateContainer {\n    display: flex;\n    flex-direction: column;\n    gap: 3px;\n    margin-top: 10px;\n}\n.leftSquare {\n    display: flex;\n    justify-content: center;\n}\n.leftSquare, .upperSquare {\n    height: 35px;\n    width: 35px;\n    display: flex;\n    justify-content: center;\n}\n.subcontainer {\n    display: flex;\n}\n.square {\n    border: solid black;\n    color: black;\n    font-size: 12px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.grid-container {\n    height: 350px;\n    width: 350px;\n    display: grid;\n    grid-template-columns: repeat(10, 35px);\n    grid-template-rows: repeat(10, 35px);\n    grid-auto-flow: column;\n    gap: 3px;\n}\n/* styles for score card */\n.singleBoardScoreContainer {\n    display: flex;\n    gap: 5px;\n    justify-content: left;\n}\n\n/*styles for game controller hud*/\n.populateButton {\n    height: 40px;\n    width: 60px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.buttonContainer {\n    display: flex;\n    gap: 15px;\n    justify-content: center;\n}\n.formContainer {\n    display: flex;\n    justify-content: center;\n    gap: 5px;\n    margin: 10px;\n}\n.winnerCard {\n    position: absolute;\n    background-color: red;\n    top: 35%;\n    left: 49%;\n}"],sourceRoot:""}]);const s=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,a,r){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(i)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var d=0;d<t.length;d++){var c=[].concat(t[d]);i&&o[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(a," */"),o=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([r]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var r={},o=[],s=0;s<t.length;s++){var l=t[s],d=i.base?l[0]+i.base:l[0],c=r[d]||0,p="".concat(d," ").concat(c);r[d]=c+1;var u=n(p),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(A);else{var h=a(A,i);i.byIndex=s,e.splice(s,0,{identifier:p,updater:h,references:1})}o.push(p)}return o}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var r=i(t=t||[],a=a||{});return function(t){t=t||[];for(var o=0;o<r.length;o++){var s=n(r[o]);e[s].references--}for(var l=i(t,a),d=0;d<r.length;d++){var c=n(r[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}r=l}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,a&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var a=e[i];if(void 0!==a)return a.exports;var r=e[i]={id:i,exports:{}};return t[i](r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),i=n(795),a=n.n(i),r=n(569),o=n.n(r),s=n(565),l=n.n(s),d=n(216),c=n.n(d),p=n(589),u=n.n(p),A=n(426),h={};h.styleTagTransform=u(),h.setAttributes=l(),h.insert=o().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=c(),e()(A.Z,h),A.Z&&A.Z.locals&&A.Z.locals;class f{constructor(t,e,n,i){this.size=t,this.hits=[],this.xStart=e,this.yStart=n}hit(){return this.hits.push("hit"),this.hits.length==this.size?this.isSunk():this.hit}isSunk(){return"sunk!"}}class C{constructor(t,e){this.X=t,this.Y=e,this.isHit=!1,this.containsShip=!1,this.ship=null}}class m{constructor(t){this.xAxis=["A","B","C","D","E","F","G","H","I","J"],this.yAxis=[1,2,3,4,5,6,7,8,9,10],this.grid=this.makeGrid()}receiveAttack(t,e){let n=this.grid.find((n=>n.X==t&&n.Y==e));return n.isHit=!0,1==n.containsShip?(n.ship.hit(),n.ship):n.ship}makeGrid(){let t=[];for(let e=0;e<this.xAxis.length;e++)for(let n=0;n<this.yAxis.length;n++){let i=new C(this.xAxis[e],this.yAxis[n]);t.push(i)}return t}populateShip(t,e,n,i){if(t>1){if("north"==i&&n<t)return console.log("overflow at "+e+n),"overflow!";if("south"==i&&n-1>10-t)return console.log("overflow at "+e+n),"overflow!";if("west"==i&&this.xAxis.indexOf(e)<t-1)return console.log("overflow at "+e+n),"overflow!";if("east"==i&&this.xAxis.indexOf(e)>10-t)return console.log("overflow at "+e+n),"overflow!"}let a=new f(t,e,n),r=this.grid.find((t=>t.X==a.xStart&&t.Y==a.yStart)),o=[];for(r.containsShip=!0,r.ship=a,o.push(r);t>1;)if("north"==i){n-=1;let e=this.grid.find((t=>t.X==a.xStart&&t.Y==n));e.containsShip=!0,e.ship=a,o.push(e),t-=1}else if("south"==i){n+=1;let e=this.grid.find((t=>t.X==a.xStart&&t.Y==n));e.containsShip=!0,e.ship=a,o.push(e),t-=1}else if("east"==i){e=this.xAxis[this.xAxis.indexOf(e)+1];let n=this.grid.find((t=>t.X==e&&t.Y==a.yStart));n.containsShip=!0,n.ship=a,o.push(n),t-=1}else if("west"==i){e=this.xAxis[this.xAxis.indexOf(e)-1];let n=this.grid.find((t=>t.X==e&&t.Y==a.yStart));n.containsShip=!0,n.ship=a,o.push(n),t-=1}return o}}let x=new m,y=new m,B=new class{constructor(t,e,n,i){this.playerBoard=t,this.player=e,this.aiBoard=n,this.ai=i,M(this.playerBoard,this.aiBoard),X("Player",0,"AI",0)}populatePlayer(t,e,n,i){}simplePopulate(){this.playerBoard.populateShip(2,"I",4,"east"),this.playerBoard.populateShip(4,"C",5,"east"),this.playerBoard.populateShip(3,"J",6,"south"),this.playerBoard.populateShip(3,"B",8,"south"),this.playerBoard.populateShip(2,"E",9,"east");let t=document.getElementById("container");t.removeChild(t.firstChild),M(this.playerBoard,this.aiBoard)}simplePopulateAI(){this.aiBoard.populateShip(2,"I",4,"east"),this.aiBoard.populateShip(4,"C",5,"east"),this.aiBoard.populateShip(3,"J",6,"south"),this.aiBoard.populateShip(3,"B",8,"south"),this.aiBoard.populateShip(2,"E",9,"east");let t=document.getElementById("container");t.removeChild(t.firstChild),M(this.playerBoard,this.aiBoard)}attackAI(t,e){if(this.aiBoard.X==t||this.aiBoard.Y==e)return console.log("repeat hit");this.aiBoard.receiveAttack(t,e),container.removeChild(container.firstChild),M(this.playerBoard,this.aiBoard),this.keepScore()}attackPlayer(t,e){this.playerBoard.receiveAttack(t,e),container.removeChild(container.firstChild),M(this.playerBoard,this.aiBoard),this.keepScore()}produceArrayOfPlayerShips(){let t=[];this.playerBoard.grid.forEach((e=>{null!=e.ship&&t.push(e.ship)}));let e=[];return t.forEach((t=>{e.includes(t)||e.push(t)})),e}produceArrayOfAiShips(){let t=[];this.aiBoard.grid.forEach((e=>{null!=e.ship&&t.push(e.ship)}));let e=[];return t.forEach((t=>{e.includes(t)||e.push(t)})),e}keepScore(){let t=this.produceArrayOfPlayerShips(),e=this.produceArrayOfAiShips(),n=0,i=0;t.forEach((t=>{t.hits.length==t.size&&(n+=1)})),e.forEach((t=>{t.hits.length==t.size&&(i+=1)})),container.removeChild(container.firstChild.nextSibling),X("Player",n,"AI",i),5==n?T("You win!"):5==i&&T("AI wins!")}randomParameterProducer(){return[this.playerBoard.xAxis[Math.trunc(10*Math.random())],this.playerBoard.yAxis[Math.trunc(10*Math.random())]]}}(x,"taylor",y,"computer");const g=document.createElement("button");g.addEventListener("click",(function(){B.simplePopulate()})),g.classList.add("populateButton"),g.textContent="Populate Player";const I=document.createElement("button");I.addEventListener("click",(function(){B.simplePopulateAI()})),I.classList.add("populateButton"),I.textContent="Populate AI";const v=document.createElement("button");v.addEventListener("click",E),v.classList.add("populateButton"),v.textContent="Attack AI";const b=document.createElement("button");b.addEventListener("click",k),b.classList.add("populateButton"),b.textContent="Attack Player";const S=B.playerBoard.grid.slice();function E(t,e){let n=B.aiBoard.grid.find((n=>n.X==t&&n.Y==e));if(console.log(n),1==n.isHit&&alert("You have already attacked that square! Try another."),0==n.isHit){let i=B.aiBoard.grid.indexOf(n);S.splice(i,1),B.attackAI(t,e),setTimeout((()=>{k()}),"500")}}const w=B.playerBoard.grid.slice();function k(){if(0==w.length)return alert("game over!");let t=w[Math.floor(Math.random()*w.length)],e=t.X,n=t.Y,i=w.indexOf(t);w.splice(i,1),B.attackPlayer(e,n)}let L=document.createElement("label");L.classList.add("attackLabel"),L.textContent="Input X Coordinate: ";let Y=document.createElement("input");Y.setAttribute("type","text");let j=document.createElement("label");j.classList.add("attackLabel"),j.textContent="Input Y Coordinate: ";let P=document.createElement("input");function q(t){let e=document.createElement("div");e.classList.add("singleBoardContainer");let n=document.createElement("div");return n.classList.add("subcontainer"),n.appendChild(function(){let t=document.createElement("div");return t.classList.add("yCoordinateContainer"),[1,2,3,4,5,6,7,8,9,10].forEach((e=>{let n=document.createElement("div");n.classList.add("leftSquare"),n.textContent=e,t.appendChild(n)})),t}()),n.appendChild(function(t){let e=t.grid,n=document.createElement("div");return n.classList.add("grid-container"),e.forEach((t=>{let e=function(t){let e=document.createElement("div");return e.classList.add("square"),e.textContent=t.containsShip,"true"==e.textContent&&(e.style.backgroundColor="red"),1==t.isHit&&(e.textContent="X"),e.addEventListener("click",(function(){E(t.X,t.Y)})),e}(t);n.appendChild(e)})),n}(t)),e.appendChild(function(){let t=document.createElement("div");return t.classList.add("xCoordinateContainer"),["A","B","C","D","E","F","G","H","I","J"].forEach((e=>{let n=document.createElement("div");n.classList.add("upperSquare"),n.textContent=e,t.appendChild(n)})),t}()),e.appendChild(n),e}function M(t,e){document.getElementById("container").prepend(function(t,e){let n=document.createElement("div");return n.classList.add("doubleBoardContainer"),n.appendChild(q(t)),n.appendChild(q(e)),n}(t,e))}function O(t,e){let n=document.createElement("div");n.classList.add("singleBoardScoreContainer");let i=document.createElement("div"),a=document.createElement("div");return i.textContent=t+" score: ",n.appendChild(i),n.appendChild(a),a.textContent=e+"/10",n}function X(t,e,n,i){let a=document.createElement("div");a.classList.add("scoreKeeperContainer"),a.appendChild(O(t,e)),a.appendChild(O(n,i)),document.getElementById("container").appendChild(a)}function T(t){let e=document.createElement("div");e.classList.add("winnerCard"),e.textContent=t,container.firstChild.appendChild(e)}P.setAttribute("type","text"),document.body.appendChild(function(){let t=document.createElement("div");return t.classList.add("buttonContainer"),t.appendChild(g),t.appendChild(I),t.appendChild(b),t.appendChild(v),t}()),document.body.appendChild(function(){let t=document.createElement("div");return t.classList.add("formContainer"),t.appendChild(function(){let t=document.createElement("div");return t.classList.add("formContainer"),t.appendChild(L),t.appendChild(Y),t}()),t.appendChild(function(){let t=document.createElement("div");return t.classList.add("formContainer"),t.appendChild(j),t.appendChild(P),t}()),t}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,